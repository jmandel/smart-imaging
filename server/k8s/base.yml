apiVersion: v1
kind: Namespace
metadata:
  name: smart-imaging-access
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: orthanc-config
  namespace: smart-imaging-access
data:
  config.json: |
      {
         "DicomWeb" : {
          "Enable" : true,             // Whether DICOMweb support is enabled
          "Root" : "/dicom-web/",      // Root URI of the DICOMweb API (for QIDO-RS, STOW-RS and WADO-RS)
          "StudiesMetadata" : "Full",  // How study-level metadata is retrieved (since release 1.1, cf. section below)
          "SeriesMetadata" : "Full"   // How series-level metadata is retrieved (since release 1.1, cf. section below)
        },
        "Name" : "Orthanc for Argonaut Imaging Demo",
        "StorageDirectory" : "/var/lib/orthanc/db",
        "Plugins" : [ 
          "/usr/share/orthanc/plugins", "/usr/local/share/orthanc/plugins"
        ],
        "ConcurrentJobs" : 2,
        "HttpServerEnabled" : true,
        "OrthancExplorerEnabled" : true,
        "HttpPort" : 8042,
        "HttpDescribeErrors" : true,
        "HttpCompressionEnabled" : true,
        "WebDavEnabled" : true,
        "DicomServerEnabled" : true,
        "DicomAet" : "ORTHANC",
        "DicomPort" : 4242,
        "DefaultEncoding" : "Latin1",
        "AcceptedTransferSyntaxes" : [ "1.2.840.10008.1.*" ],
        "UnknownSopClassAccepted" : false,
        "DicomScpTimeout" : 30,
        "RemoteAccessAllowed" : true,
        "RegisteredUsers" : {
           "argonaut" : "argonaut"
        },
        "SslEnabled" : false,
        "SslCertificate" : "certificate.pem",
        "SslMinimumProtocolVersion" : 4,
        "SslVerifyPeers" : false,
        "SslTrustedClientCertificates" : "trustedClientCertificates.pem",
        "DicomTlsEnabled" : false,
        "DicomAlwaysAllowStore" : true,
        "DicomAlwaysAllowFind" : false,
        "DicomAlwaysAllowFindWorklist" : false,
        "DicomAlwaysAllowGet" : false,
        "DicomAlwaysAllowMove" : false,
        "DicomCheckModalityHost" : false,
        "DicomModalitiesInDatabase" : false,
        "DicomEchoChecksFind" : false,
        "DicomScuPreferredTransferSyntax" : "1.2.840.10008.1.2.1",
        "DicomThreadsCount" : 4,
        "HttpProxy" : "",
        "HttpVerbose" : false,
        "HttpTimeout" : 60,
        "HttpsVerifyPeers" : true,
        "HttpsCACertificates" : "/etc/ssl/certs/ca-certificates.crt",
        "StableAge" : 60,
        "StrictAetComparison" : false,
        "StoreMD5ForAttachments" : true,
        "LimitFindResults" : 0,
        "LimitFindInstances" : 0,
        "LogExportedResources" : false,
        "KeepAlive" : true,
        "TcpNoDelay" : true,
        "HttpThreadsCount" : 50,
        "StoreDicom" : true,
        "DicomAssociationCloseDelay" : 5,
        "QueryRetrieveSize" : 100,
        "CaseSensitivePN" : false,
        "LoadPrivateDictionary" : true,
        "SynchronousCMove" : true,
        "JobsHistorySize" : 10,
        "SaveJobs" : true,
        "OverwriteInstances" : true,
        "MediaArchiveSize" : 1,
        "StorageAccessOnFind" : "Always",
        "MetricsEnabled" : true,
        "ExecuteLuaEnabled" : false,
        "HttpRequestTimeout" : 30,
        "StorageCommitmentReportsSize" : 100,
        "TranscodeDicomProtocol" : true,
        "BuiltinDecoderTranscoderOrder" : "After",
        "IngestTranscodingOfUncompressed" : true,
        "IngestTranscodingOfCompressed" : true,
        "DicomLossyTranscodingQuality" : 90,
        "SyncStorageArea" : true,
        "MallocArenaMax" : 5,
        "DeidentifyLogs" : true,
        "DeidentifyLogsDicomVersion" : "2021b",
        "CheckRevisions" : false,
        "SynchronousZipStream" : true,
        "ZipLoaderThreads": 0
      }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reference
  namespace: smart-imaging-access
spec:
  selector:
    matchLabels:
      app: reference
  replicas: 1
  template:
    metadata:
      namespace: smart-imaging-access
      labels:
        app: reference
    spec:
      containers:
      - name: proxy
        image: argonautcontainerregistry.azurecr.io/imaging-proxy:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: BASE_URL
          valueFrom:
            configMapKeyRef:
              name: proxy-config
              key: BASE_URL
        - name: LOCAL_STACK_CONFIG
          valueFrom:
            configMapKeyRef:
              name: proxy-config
              key: LOCAL_STACK_CONFIG
        ports:
        - containerPort: 8000
          name: proxy
        args:
        - /bin/bash
        - -c
        - >
          deno run $LOCAL_STACK_CONFIG --allow-all src/index.ts;
      - name: sample-loader
        image: argonautcontainerregistry.azurecr.io/imaging-proxy:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: BASE_URL
          value: "http://orthanc"
        - name: ORTHANC_USERNAME
          value: "argonaut"
        - name: ORTHANC_PASSWORD
          value: "argonaut"
        args:
        - /bin/bash
        - -c
        - >
          cd examples;
          deno run --allow-all load-examples.ts --wait-for-dicom-server;
          sleep infinity; 
---
apiVersion: v1
kind: Service
metadata:
  name: reference
  namespace: smart-imaging-access
spec:
  selector:
    app: reference
  ports:
  - name: proxy
    protocol: TCP
    port: 8000
    targetPort: proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: launcher
  namespace: smart-imaging-access
spec:
  selector:
    matchLabels:
      app: launcher
  replicas: 1
  template:
    metadata:
      namespace: smart-imaging-access
      labels:
        app: launcher
    spec:
      containers:
      - name: launcher
        image: argonautcontainerregistry.azurecr.io/smartonfhir/smart-launcher-2:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: launcher-web
---
apiVersion: v1
kind: Service
metadata:
  name: launcher
  namespace: smart-imaging-access
spec:
  selector:
    app: launcher
  ports:
  - name: launcher
    protocol: TCP
    port: 80
    targetPort: launcher-web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orthanc
  namespace: smart-imaging-access
spec:
  selector:
    matchLabels:
      app: orthanc
  replicas: 1
  template:
    metadata:
      namespace: smart-imaging-access
      labels:
        app: orthanc
    spec:
      volumes:
      - configMap:
          name: orthanc-config
        name: orthanc-config-volume
      containers:
      - name: orthanc
        image: jodogne/orthanc-plugins:1.11.0
        volumeMounts:
        - name: orthanc-config-volume
          subPath: config.json
          mountPath: /etc/orthanc/orthanc.json
        ports:
        - containerPort: 8042
          name: orthanc-web
---
apiVersion: v1
kind: Service
metadata:
  name: orthanc
  namespace: smart-imaging-access
spec:
  selector:
    app: orthanc
  ports:
  - name: orthanc-web
    protocol: TCP
    port: 8042
    targetPort: orthanc-web
